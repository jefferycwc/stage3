/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

import (
	"free5gc/lib/http_wrapper"
	"free5gc/lib/openapi/models"
	"free5gc/src/udr/handler/message"
	"free5gc/src/udr/logger"
	"net/http"

	"github.com/gin-gonic/gin"
)

// ApplicationDataInfluenceDataGet -
func ApplicationDataInfluenceDataGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ApplicationDataInfluenceDataInfluenceIdDelete -
func ApplicationDataInfluenceDataInfluenceIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ApplicationDataInfluenceDataInfluenceIdPatch -
func ApplicationDataInfluenceDataInfluenceIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ApplicationDataInfluenceDataInfluenceIdPut -
func ApplicationDataInfluenceDataInfluenceIdPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ApplicationDataInfluenceDataSubsToNotifyGet -
func ApplicationDataInfluenceDataSubsToNotifyGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ApplicationDataInfluenceDataSubsToNotifyPost -
func ApplicationDataInfluenceDataSubsToNotifyPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete -
func ApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet -
func ApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut -
func ApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ApplicationDataPfdsAppIdDelete -
func ApplicationDataPfdsAppIdDelete(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["appId"] = c.Params.ByName("appId")

	handlerMsg := message.NewHandlerMessage(message.EventApplicationDataPfdsAppIdDelete, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// ApplicationDataPfdsAppIdGet -
func ApplicationDataPfdsAppIdGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["appId"] = c.Params.ByName("appId")

	handlerMsg := message.NewHandlerMessage(message.EventApplicationDataPfdsAppIdGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// ApplicationDataPfdsAppIdPut -
func ApplicationDataPfdsAppIdPut(c *gin.Context) {
	var pfdDataforApp models.PfdDataForApp
	err := c.ShouldBindJSON(&pfdDataforApp)
	if err != nil {
		logger.HandlerLog.Errorln(err)
		c.JSON(http.StatusBadRequest, gin.H{})
		return
	}
	if pfdDataforApp.ApplicationId == "" || len(pfdDataforApp.Pfds) == 0 {
		logger.HandlerLog.Errorln("No ApplicationId or Pfds")
		c.JSON(http.StatusBadRequest, gin.H{})
		return
	}

	req := http_wrapper.NewRequest(c.Request, pfdDataforApp)
	req.Params["appId"] = c.Params.ByName("appId")

	handlerMsg := message.NewHandlerMessage(message.EventApplicationDataPfdsAppIdPut, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// ApplicationDataPfdsGet -
func ApplicationDataPfdsGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	handlerMsg := message.NewHandlerMessage(message.EventApplicationDataPfdsGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// ExposureDataSubsToNotifyPost -
func ExposureDataSubsToNotifyPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ExposureDataSubsToNotifySubIdDelete - Deletes a subcription for notifications
func ExposureDataSubsToNotifySubIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ExposureDataSubsToNotifySubIdPut - updates a subcription for notifications
func ExposureDataSubsToNotifySubIdPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// PolicyDataBdtDataBdtReferenceIdDelete -
func PolicyDataBdtDataBdtReferenceIdDelete(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["bdtReferenceId"] = c.Params.ByName("bdtReferenceId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataBdtDataBdtReferenceIdDelete, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataBdtDataBdtReferenceIdGet -
func PolicyDataBdtDataBdtReferenceIdGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["bdtReferenceId"] = c.Params.ByName("bdtReferenceId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataBdtDataBdtReferenceIdGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataBdtDataBdtReferenceIdPut -
func PolicyDataBdtDataBdtReferenceIdPut(c *gin.Context) {
	var bdtData models.BdtData
	if err := c.ShouldBindJSON(&bdtData); err != nil {
		logger.DataRepoLog.Panic(err.Error())
	}

	req := http_wrapper.NewRequest(c.Request, bdtData)
	req.Params["bdtReferenceId"] = c.Params.ByName("bdtReferenceId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataBdtDataBdtReferenceIdPut, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataBdtDataGet -
func PolicyDataBdtDataGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataBdtDataGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataPlmnsPlmnIdUePolicySetGet -
func PolicyDataPlmnsPlmnIdUePolicySetGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["plmnId"] = c.Params.ByName("plmnId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataPlmnsPlmnIdUePolicySetGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataSponsorConnectivityDataSponsorIdGet -
func PolicyDataSponsorConnectivityDataSponsorIdGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["sponsorId"] = c.Params.ByName("sponsorId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataSponsorConnectivityDataSponsorIdGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataSubsToNotifyPost -
func PolicyDataSubsToNotifyPost(c *gin.Context) {
	var policyDataSubscription models.PolicyDataSubscription
	if err := c.ShouldBindJSON(&policyDataSubscription); err != nil {
		logger.DataRepoLog.Panic(err.Error())
	}

	req := http_wrapper.NewRequest(c.Request, policyDataSubscription)

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataSubsToNotifyPost, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse
	for key, val := range HTTPResponse.Header {
		c.Header(key, val[0])
	}

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataSubsToNotifySubsIdDelete -
func PolicyDataSubsToNotifySubsIdDelete(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["subsId"] = c.Params.ByName("subsId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataSubsToNotifySubsIdDelete, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataSubsToNotifySubsIdPut -
func PolicyDataSubsToNotifySubsIdPut(c *gin.Context) {
	var policyDataSubscription models.PolicyDataSubscription
	if err := c.ShouldBindJSON(&policyDataSubscription); err != nil {
		logger.DataRepoLog.Panic(err.Error())
	}

	req := http_wrapper.NewRequest(c.Request, policyDataSubscription)
	req.Params["subsId"] = c.Params.ByName("subsId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataSubsToNotifySubsIdPut, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdAmDataGet -
func PolicyDataUesUeIdAmDataGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdAmDataGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdOperatorSpecificDataGet -
func PolicyDataUesUeIdOperatorSpecificDataGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdOperatorSpecificDataGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdOperatorSpecificDataPatch - Need to be fixed
func PolicyDataUesUeIdOperatorSpecificDataPatch(c *gin.Context) {
	var patchItemArray []models.PatchItem
	if err := c.ShouldBindJSON(&patchItemArray); err != nil {
		logger.DataRepoLog.Panic(err.Error())
	}

	req := http_wrapper.NewRequest(c.Request, patchItemArray)
	req.Params["ueId"] = c.Params.ByName("ueId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdOperatorSpecificDataPatch, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdOperatorSpecificDataPut -
func PolicyDataUesUeIdOperatorSpecificDataPut(c *gin.Context) {
	var operatorSpecificDataContainerMap map[string]models.OperatorSpecificDataContainer
	if err := c.ShouldBindJSON(&operatorSpecificDataContainerMap); err != nil {
		logger.DataRepoLog.Panic(err.Error())
	}

	req := http_wrapper.NewRequest(c.Request, operatorSpecificDataContainerMap)
	req.Params["ueId"] = c.Params.ByName("ueId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdOperatorSpecificDataPut, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdSmDataGet -
func PolicyDataUesUeIdSmDataGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdSmDataGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdSmDataPatch - Need to be fixed
func PolicyDataUesUeIdSmDataPatch(c *gin.Context) {
	var usageMonDataMap map[string]models.UsageMonData
	if err := c.ShouldBindJSON(&usageMonDataMap); err != nil {
		logger.DataRepoLog.Panic(err.Error())
	}

	req := http_wrapper.NewRequest(c.Request, usageMonDataMap)
	req.Params["ueId"] = c.Params.ByName("ueId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdSmDataPatch, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdSmDataUsageMonIdDelete -
func PolicyDataUesUeIdSmDataUsageMonIdDelete(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["usageMonId"] = c.Params.ByName("usageMonId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdSmDataUsageMonIdDelete, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdSmDataUsageMonIdGet -
func PolicyDataUesUeIdSmDataUsageMonIdGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["usageMonId"] = c.Params.ByName("usageMonId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdSmDataUsageMonIdGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdSmDataUsageMonIdPut -
func PolicyDataUesUeIdSmDataUsageMonIdPut(c *gin.Context) {
	var usageMonData models.UsageMonData
	if err := c.ShouldBindJSON(&usageMonData); err != nil {
		logger.DataRepoLog.Panic(err.Error())
	}

	req := http_wrapper.NewRequest(c.Request, usageMonData)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["usageMonId"] = c.Params.ByName("usageMonId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdSmDataUsageMonIdPut, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdUePolicySetGet -
func PolicyDataUesUeIdUePolicySetGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdUePolicySetGet, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdUePolicySetPatch -
func PolicyDataUesUeIdUePolicySetPatch(c *gin.Context) {
	var uePolicySet models.UePolicySet
	if err := c.ShouldBindJSON(&uePolicySet); err != nil {
		logger.DataRepoLog.Panic(err.Error())
	}

	req := http_wrapper.NewRequest(c.Request, uePolicySet)
	req.Params["ueId"] = c.Params.ByName("ueId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdUePolicySetPatch, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}

// PolicyDataUesUeIdUePolicySetPut -
func PolicyDataUesUeIdUePolicySetPut(c *gin.Context) {
	var uePolicySet models.UePolicySet
	if err := c.ShouldBindJSON(&uePolicySet); err != nil {
		logger.DataRepoLog.Panic(err.Error())
	}

	req := http_wrapper.NewRequest(c.Request, uePolicySet)
	req.Params["ueId"] = c.Params.ByName("ueId")

	handlerMsg := message.NewHandlerMessage(message.EventPolicyDataUesUeIdUePolicySetPut, req)
	message.SendMessage(handlerMsg)

	rsp := <-handlerMsg.ResponseChan

	HTTPResponse := rsp.HTTPResponse

	c.JSON(HTTPResponse.Status, HTTPResponse.Body)
}
